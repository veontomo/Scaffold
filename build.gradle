group 'Scaffold'
version '0.0.1'

apply plugin: 'idea'
apply plugin: "application"
apply plugin: "java"
apply plugin: "kotlin"
apply from: 'dependencies.gradle'
mainClassName = 'scaffold.MainKt'

buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        mavenCentral()
        maven {
            url "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
    }

}

// create an auxiliary file for the MockMaker of the Mockito 2 framework.
// see http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/
task createTestResources << {
    def separator = File.separator
    def fileName = [projectDir, 'src', 'test', 'resources', 'mockito-extensions', 'org.mockito.plugins.MockMaker'].join(separator)
    def mockMakerFile = new File(fileName)
    if (mockMakerFile.exists()) {
        logger.info("File ${mockMakerFile.name} already exists.")
    } else {
        def content = System.env.MOCK_MAKER ?: "mock-maker-inline"
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(content)
        println "create file ${mockMakerFile.name}"
    }

}
sourceCompatibility = JavaVersion.VERSION_1_8
repositories {
    mavenCentral()
    maven {
        url "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
apply plugin: 'org.junit.platform.gradle.plugin'
dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:$versions.junitJupiter")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$versions.junitJupiter")
    compile "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    compile 'org.reactivestreams:reactive-streams:1.0.0.final'
    compile 'io.reactivex.rxjava2:rxkotlin:2.0.0'
}

junitPlatform {
    // platformVersion '1.0.0-M4'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}
